#!/usr/bin/env bash
#    This file is part of the FAST-ER machine learning system.
#    Copyright (C) 2008  Edward Rosten and Los Alamos National Laboratory
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

file="$2"
name="$1"
if [ "$#" != 2 ]
then
	echo `basename $0`: error: incorrect arguments.
	echo "Usage:  `basename $0` <function_name> <file>"
	exit 1
fi

debug_use_test_rig=0

num_offsets=$(head -1 $file)


border=$(
      awk '
        NR==1{features = $1}
        NR==2{
          gsub(/[\[\],]/, "")
          if(features != NF/2)
          {
            print "Malformed offsets line"
            exit(1);
          }
		  o=0
          
          for(x=1; x <= NF; x++)
		  	o = ($x > o? $x : o)

		  print o

		  exit(0);
      } ' $file 
)



if [ "$debug_use_test_rig" == 1 ]
then
cat<<END

function test()
	image = imread('frame_1.pgm');
	
	corners = ${name}(image, 20, 'nonmax');

	imshow(image);
	hold on
	plot(corners(:,1), corners(:,2), 'r.')

END
fi


uppername=$(echo $name | tr '[a-z]' '[A-Z]')

cat << END


"""  performs FAST corner detection.
	
	 If you use this in published work, please cite:
	   Faster and better: A machine learning approach to corner detection, E. Rosten, R. Porter and T. Drummond, PAMI 2010
	   Machine learning for high-speed corner detection, E. Rosten and T. Drummond, ECCV 2006
	 The Bibtex entries are:

	 @inproceedings{rosten_2006_machine,
		title       =    "Machine learning for high-speed corner detection",
		author      =    "Edward Rosten and Tom Drummond",
		year        =    "2006",
		month       =    "May",
		pages       =    "430--443",
		volume      =    "1",
		doi         =    "10.1007/11744023_34",
		booktitle   =    "European Conference on Computer Vision",
		notes       =    "Poster presentation",
		url         =    "http://mi.eng.cam.ac.uk/~er258/work/rosten_2006_machine.pdf",
	}

	@article{rosten_2008_faster,
		title       =    "FASTER and better: A machine learning approach to corner detection",
		author      =    "Edward Rosten and Reid Porter and Tom Drummond",
		year        =    "2010",
		journal     =    "IEEE Trans. Pattern Analysis and Machine Intelligence",
		pages       =    "105--119",
		volume      =    "32",
		doi         =    "10.1109/TPAMI.2008.275",
		eprint      =    "arXiv:0810.2434 [cs.CV]",
		url         =    "http://lanl.arXiv.org/pdf/0810.2434",
	}
"""

import numpy

def detect(image, threshold, do_nonmax=1):
	"""
	(corners, scores) = $name.detect(image, threshold) performs the detection
	on the image and returns the corners as a list of (x,y) tuples and the
	scored as a list of integers.  The score is computed using binary search
	over all possible thresholds.

	(corners, scores) = $name.detect(image, threshold, nonmax=0) performs the corner
	detection but suppresses nonmaximal suppression.
	"""

	corners = []
	scores=[]
	rows = image.shape[0]
	cols = image.shape[1]

	for y in xrange($((border+1)), rows-$((border+1))):
		for x in xrange($((border+1)), cols-$((border+1))):
			cb = image[y][x] + threshold
			c_b = image[y][x] - threshold
$(
		awk '
			NR==1{features = $1}
			NR==2{
				gsub(/[\[\],]/, "")
				for(x=1; x <= features; x++)
				{
					offx[x-1] = $(2*x-1)
					offy[x-1] = $(2*x)
				}
			}

			{ ind = "			"substr($0, 1, match($0, /[^ ]/)-1)}

			{ accessor = "image[y+"offy[$2]"][x+"offx[$2]"]" }

			/if_brighter/{print ind "if " accessor " > cb: "}

			/elsf_darker/ {print ind "elif " accessor " < c_b: "}
			/if_darker/{print ind "if " accessor " < c_b:"}
			/if_either/{print ind "if " accessor " > cb or " accessor " < c_b: "}
			/else/{print ind "else:"}
			#/end/{print ind ""}
			/background/{print ind "continue"}
			/corner/{print ind "pass"}
				' $file
			)


			corners.append((x,y))

	for i in xrange(0, len(corners)):
		scores.append(corner_score(image, corners[i][0], corners[i][1]))
	
	if do_nonmax:
		#Paint corners into an image
		sc = numpy.zeros(image.shape);
		for i in xrange(0, len(corners)):
			sc[corners[i][1], corners[i][0]] = scores[i];

		nonmax_corners=[]
		nonmax_scores =[]

		for i in xrange(0, len(corners)):
			s = scores[i]
			x = corners[i][0]
			y = corners[i][1]

			if s >= sc[y-1][x+1] and s >= sc[y-1][x] and s >= sc[y-1][x-1] and s >= sc[y][x+1] and s >= sc[y][x-1] and s >= sc[y+1][x+1] and s >= sc[y+1][x] and s >= sc[y+1][x-1]:
				nonmax_corners.append((x, y))
				nonmax_scores.append(s)


		return (nonmax_corners, nonmax_scores)
			


	else:
		return (corners, scores)


def is_a_corner(i, posx, posy, b):
	cb = i[posy][posx] + b
	c_b = i[posy][posx] - b
$(
	awk '
		NR==1{features = $1}
		NR==2{
        	gsub(/[\[\],]/, "")
			for(x=1; x <= features; x++)
			{
				offx[x-1] = $(2*x-1)
				offy[x-1] = $(2*x)
			}
		}

		{ ind = "	"substr($0, 1, match($0, /[^ ]/)-1)}

		{ accessor = "i[posy+"offy[$2]"][posx+"offx[$2]"]" }

		/if_brighter/{print ind "if " accessor " > cb: "}

		/elsf_darker/ {print ind "elif " accessor " < c_b: "}
		/if_darker/{print ind "if " accessor " < c_b:"}
		/if_either/{print ind "if " accessor " > cb or " accessor " < c_b:"}
		/else/{print ind "else:"}
		#/end/{print ind "end"}
		/corner/{print ind "return 1"}
		/background/{print ind "return 0"}
            ' $file
        )

def corner_score(i, posx, posy):
    
	bmin = 0
	bmax = 255
	b = (bmax + bmin)/2
    
	#Compute the score using binary search
	while True:
    
		if is_a_corner(i, posx, posy, b):
			bmin = b
		else:
			bmax = b
        
		if bmin == bmax - 1 or bmin == bmax:
			return bmin

		b = (bmin + bmax) / 2

END
